[{"/Users/lorca/Documents/learning-projects/cypress-tutorial/project-1/src/index.tsx":"1","/Users/lorca/Documents/learning-projects/cypress-tutorial/project-1/src/reportWebVitals.ts":"2","/Users/lorca/Documents/learning-projects/cypress-tutorial/project-1/src/App.tsx":"3","/Users/lorca/Documents/learning-projects/cypress-tutorial/project-1/src/components/Habit/Habit.tsx":"4","/Users/lorca/Documents/learning-projects/cypress-tutorial/project-1/src/components/SideNav/SideNav.tsx":"5","/Users/lorca/Documents/learning-projects/cypress-tutorial/project-1/src/components/Accomplishment/Accomplishment.tsx":"6","/Users/lorca/Documents/learning-projects/cypress-tutorial/project-1/src/components/Elements/Elements.tsx":"7","/Users/lorca/Documents/learning-projects/cypress-tutorial/project-1/src/components/Modal/Modal.tsx":"8","/Users/lorca/Documents/learning-projects/cypress-tutorial/project-1/src/components/HabitCard/HabitCard.tsx":"9"},{"size":500,"mtime":1650563921751,"results":"10","hashOfConfig":"11"},{"size":425,"mtime":1650563921751,"results":"12","hashOfConfig":"11"},{"size":953,"mtime":1650563921749,"results":"13","hashOfConfig":"11"},{"size":944,"mtime":1650563921750,"results":"14","hashOfConfig":"11"},{"size":707,"mtime":1650563921750,"results":"15","hashOfConfig":"11"},{"size":4156,"mtime":1650563921749,"results":"16","hashOfConfig":"11"},{"size":1961,"mtime":1650563921750,"results":"17","hashOfConfig":"11"},{"size":1837,"mtime":1650563921750,"results":"18","hashOfConfig":"11"},{"size":1352,"mtime":1650563921750,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1jrajdx",{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},"/Users/lorca/Documents/learning-projects/cypress-tutorial/project-1/src/index.tsx",[],[],"/Users/lorca/Documents/learning-projects/cypress-tutorial/project-1/src/reportWebVitals.ts",[],[],"/Users/lorca/Documents/learning-projects/cypress-tutorial/project-1/src/App.tsx",["52","53"],[],"import logo from './logo.svg';\nimport './App.css';\nimport SideNav from './components/SideNav/SideNav';\nimport Habit from \"./components/Habit/Habit\"\nimport Accomplishment from './components/Accomplishment/Accomplishment';\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\"\nimport Rewards from './components/Rewards/Rewards';\nimport Elements from './components/Elements/Elements';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <div className=\"App-container\">\n          <SideNav />\n          <Switch>\n            <Route strict exact path=\"/habits\" component={Habit} />\n            <Route strict exact path=\"/accomplishments\" component={Accomplishment} />\n            {/* <Route strict exact path=\"/rewards\" component={Rewards} /> */}\n            <Route strict exact path=\"/elements\" component={Elements} />\n          </Switch>\n        </div>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","/Users/lorca/Documents/learning-projects/cypress-tutorial/project-1/src/components/Habit/Habit.tsx",["54","55"],[],"import React, { useState, useEffect } from 'react'\nimport HabitCard from '../HabitCard/HabitCard'\nimport Modal from \"../Modal/Modal\"\nimport \"./Habit.css\"\nimport axios from \"axios\"\n\ntype IState = {\n    _id: string;\n    habit: string;\n    completed: boolean;\n}[]\n\nfunction Habit() {\n\n    const [habits, setHabits] = useState<IState>([]);\n    console.log(habits, \"habits\")\n\n    return (\n        <div className=\"Habit\">\n            <div className=\"Habit__heading-container\">\n                <h2 className=\"Habit-header\">Habit Checklist</h2>\n                <Modal \n                    habits={habits}\n                    setHabits={setHabits}\n                />\n            </div>\n            <div className=\"Habit-cards-container\">\n                {habits.map(habit => {\n                    return <HabitCard habit={habit} setHabits={setHabits} habits={habits}/>\n                })}\n            </div>\n        </div>\n    )\n}\n\nexport default Habit\n","/Users/lorca/Documents/learning-projects/cypress-tutorial/project-1/src/components/SideNav/SideNav.tsx",[],[],"/Users/lorca/Documents/learning-projects/cypress-tutorial/project-1/src/components/Accomplishment/Accomplishment.tsx",["56"],[],"import React, { useState } from 'react'\nimport \"./Accomplishment.css\"\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport confetti from \"../../svg/confetti.svg\"\n\nfunction Accomplishment() {\n\n    const [title, setTitle] = useState(\"\")\n    const [accomplishment, setAccomplishment] = useState(\"\")\n    const [valid, setValid] = useState(false);\n\n    const [showError, setShowError] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [showSuccess, setShowSuccess] = useState(false)\n\n    const handleSubmit = () => {\n        if(!title || !accomplishment || !valid) {\n            return setShowError(true)\n        }\n        setLoading(true)\n        setTimeout(() => {\n            setLoading(false);\n            setShowSuccess(true)\n        }, 3000)\n    }\n\n    return (\n        <div className=\"Accomplishment\">\n            <div className=\"Accomplishment__heading-container\">\n                <h2 className=\"Accomplishment-header\">Accomplishment</h2>\n            </div>\n            <div className=\"Accomplishment-cards-container\">\n                {\n                    (!loading && !showSuccess) && (\n                        <>\n                            <input \n                                className=\"Accomplishment-input\" \n                                placeholder=\"Title\" \n                                value={title}\n                                onChange={(e) => setTitle(e.target.value)}\n                                data-cy=\"accomplishment-title-input\"\n                            />\n                            <textarea \n                                className=\"Accomplishment-textarea\" \n                                placeholder=\"My accomplishment...\" \n                                value={accomplishment}\n                                onChange={(e) => setAccomplishment(e.target.value)}\n                                data-cy=\"accomplishment-input\"\n                            />\n                            <div className=\"Accomplishment-checkbox-container\">\n                                <input \n                                    type=\"checkbox\" \n                                    checked={valid} \n                                    onChange={(e) => setValid(e.target.checked)}\n                                    data-cy=\"accomplishment-checkbox\"\n                                />\n                                <p>This accomplishment is valid</p>\n                            </div>\n                            {\n                                showError && (\n                                    <div className=\"Accomplishment-error-container\">\n                                        <p>Complete the items above to continue</p>\n                                    </div>\n                                )\n                            }\n                            <button className=\"Accomplishment-btn\" onClick={handleSubmit}>Submit Accomplishment</button>\n                        </>\n                    )\n                }\n                {\n                    (loading) && (\n                        <div className=\"Accomplishment-spinner-container\">\n                            <ClipLoader size={150} />\n                        </div>\n                    )\n                }\n                {\n                    (showSuccess) && (\n                        <div>\n                            <div className=\"Accomplishment-spinner-container\">\n                                <img src={confetti} className=\"Accomplishment-img\"/> \n                                <h1>This Accomplisment was Successfully Submitted</h1> \n                            </div>\n                            <button className=\"Accomplishment-btn\" onClick={() => {\n                                setShowSuccess(false);\n                                setTitle(\"\")\n                                setAccomplishment(\"\")\n                                setValid(false);\n                                setShowError(false)\n                            }}>Go Back</button>\n                        </div>\n                    )\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default Accomplishment\n","/Users/lorca/Documents/learning-projects/cypress-tutorial/project-1/src/components/Elements/Elements.tsx",[],[],"/Users/lorca/Documents/learning-projects/cypress-tutorial/project-1/src/components/Modal/Modal.tsx",["57"],[],"import { useState } from \"react\"\nimport { Modal, Button, InputGroup, FormControl } from \"react-bootstrap\";\nimport { v4 as uuid } from \"uuid\"\n\ninterface IProps {\n  habits: {\n    _id: string,\n    habit: string,\n    completed: boolean\n  }[],\n  setHabits: React.Dispatch<React.SetStateAction<{\n      _id: string,\n      habit: string;\n      completed: boolean;\n  }[]>>\n}\n\ntype Habit = {\n  _id: string,\n  habit: string,\n  completed: boolean\n}\n\nfunction AddModal({ habits, setHabits }: IProps) {\n    const [show, setShow] = useState(false);\n  \n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n    const [habit, setHabit] = useState(\"\")\n\n    const handleAdd = async () => {\n      if(habit){\n        setHabits([\n          ...habits,\n          {\n            _id: uuid(),\n            habit,\n            completed: false\n          }\n        ]);\n        setShow(false);\n        setHabit(\"\")\n      }\n    }\n  \n    return (\n      <>\n        <button onClick={handleShow} className=\"Habit-add-btn\" id=\"habit-add-btn\">Add</button>\n  \n        <Modal show={show} onHide={handleClose}>\n          <Modal.Header closeButton>\n            <Modal.Title>Add a new habit</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <InputGroup className=\"mb-3\">\n              <FormControl\n                placeholder=\"Habit\"\n                onChange={(e) => {setHabit(e.target.value)}}\n                value={habit}\n              />\n            </InputGroup>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"secondary\" onClick={handleClose}>\n              Close\n            </Button>\n            <Button variant=\"primary\" onClick={handleAdd}>\n              Save Changes\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </>\n    );\n  }\n  \nexport default AddModal","/Users/lorca/Documents/learning-projects/cypress-tutorial/project-1/src/components/HabitCard/HabitCard.tsx",["58","59","60"],[],"import React, { useState } from 'react'\nimport \"./HabitCard.css\"\nimport close from \"../../svg/close.svg\"\nimport check from \"../../svg/check.svg\"\n\ninterface IProps {\n    habit: {\n        _id: string,\n        habit: string,\n        completed: boolean\n    },\n    habits: {\n        _id: string,\n        habit: string,\n        completed: boolean\n    }[],\n    setHabits: React.Dispatch<React.SetStateAction<{\n        _id: string,\n        habit: string;\n        completed: boolean;\n    }[]>>\n}\n\nfunction HabitCard({ habit, setHabits, habits }: IProps) {\n\n    const [complete, setComplete] = useState(false)\n\n    return (\n        <div className=\"HabitCard\" onClick={() => {\n            let newHabits = habits.map(updatedHabit => {\n                if(updatedHabit._id === habit._id){\n                    return {\n                        ...habit,\n                        completed: !habit.completed\n                    }\n                } else return updatedHabit\n            });\n            setHabits(newHabits)\n        }}>\n            <div className=\"HabitCard__completion-container\">\n                <img className=\"HabitCard__completion-icon\" src={habit.completed ? check : close}/>\n            </div>\n            <div className=\"HabitCard__habit-container\">\n                {habit.habit}\n            </div>\n        </div>\n    )\n}\n\nexport default HabitCard\n",{"ruleId":"61","severity":1,"message":"62","line":1,"column":8,"nodeType":"63","messageId":"64","endLine":1,"endColumn":12},{"ruleId":"61","severity":1,"message":"65","line":7,"column":8,"nodeType":"63","messageId":"64","endLine":7,"endColumn":15},{"ruleId":"61","severity":1,"message":"66","line":1,"column":27,"nodeType":"63","messageId":"64","endLine":1,"endColumn":36},{"ruleId":"61","severity":1,"message":"67","line":5,"column":8,"nodeType":"63","messageId":"64","endLine":5,"endColumn":13},{"ruleId":"68","severity":1,"message":"69","line":81,"column":33,"nodeType":"70","endLine":81,"endColumn":85},{"ruleId":"61","severity":1,"message":"71","line":18,"column":6,"nodeType":"63","messageId":"64","endLine":18,"endColumn":11},{"ruleId":"61","severity":1,"message":"72","line":26,"column":12,"nodeType":"63","messageId":"64","endLine":26,"endColumn":20},{"ruleId":"61","severity":1,"message":"73","line":26,"column":22,"nodeType":"63","messageId":"64","endLine":26,"endColumn":33},{"ruleId":"68","severity":1,"message":"69","line":41,"column":17,"nodeType":"70","endLine":41,"endColumn":100},"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Rewards' is defined but never used.","'useEffect' is defined but never used.","'axios' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Habit' is defined but never used.","'complete' is assigned a value but never used.","'setComplete' is assigned a value but never used."]